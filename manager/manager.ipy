#!/usr/bin/ipython
import ConfigParser
import json
import os
import pymongo
import sys

use_backup = True
must_deploy = set()
if len(sys.argv) == 2:
    if sys.argv[1] == "--update-all":
        use_backup = False
    else:
        use_backup = True

for upmu in sys.argv[1:]:
    must_deploy.add(upmu)

def parseConfigFile(filename):
    cparser = ConfigParser.RawConfigParser()
    filesread = cparser.read(filename)
    if not filesread:
       print "{0} is not a valid configuration file".format(filename)

    configuration = {}

    for upmu in cparser.sections():
        options = {}
        for option in cparser.options(upmu):
            options[option] = cparser.get(upmu, option)
	    configuration[upmu] = options
    return configuration

config = parseConfigFile('upmuconfig.ini')
if use_backup:
    oldconfig = parseConfigFile('backupconfig.ini')
else:
    oldconfig = {}

curr_upmus = set(config.keys())
old_upmus = set(oldconfig.keys())

currdir = !pwd
!cd ..
!make crosscompile
!cd {currdir[0]}

client = pymongo.MongoClient()
metadata = client.upmu_test_database.upmu_metadata

for upmu in curr_upmus:
    print "Processing uPMU {0}".format(upmu)
    if upmu not in oldconfig or upmu in must_deploy:
        print "Deploying sender on uPMU {0}".format(upmu)
        try:
            copyresult = !scp -i upmukey ../sender-arm admin@{upmu}:/tmp/newtxagent; echo "$?"
            if copyresult[-1] != "0":
                raise BaseException("Could not copy sender to uPMU")
            deployresult = !ssh -i upmukey admin@{upmu} "su -c 'killall 410txagent ; rm -f /tmp/410txagent.log && cp /tmp/newtxagent /root/410txagent && /etc/init.d/S80txagent start'"; echo "$?"
            if deployresult[-1] != "0":
                raise BaseException("Could not deploy sender on uPMU")
            if upmu in must_deploy:
                must_deploy.remove(upmu)
        except BaseException as be:
            print "ERROR: could not deploy sender on uPMU {0}: {1}".format(upmu, be)
            if upmu in oldconfig:
                config[upmu] = oldconfig[upmu]
            else:
                del config[upmu]
            continue
    if upmu not in oldconfig or oldconfig[upmu] != config[upmu]:
        try:   
            print "Updating metadata for uPMU {0}".format(upmu)
            # we have to update the database in this case
            newdoc = config[upmu].copy()
            if "ip" in newdoc:
                print "WARNING: option ip is overwritten with ip address"
            newdoc["ip"] = upmu
            metadata.update({"ip": upmu}, newdoc, upsert = True)
        except BaseException as be:
            print "ERROR: could not update metadata on uPMU {0}: {1}".format(upmu, be)
            if upmu in oldconfig:
                config[upmu] = oldconfig[upmu]

for upmu in old_upmus - curr_upmus:
    print "Stopping sender for uPMU {0}".format(upmu)
    try:
        deployresult = !ssh -i upmukey admin@{upmu} "su -c 'killall 410txagent ; rm -f /tmp/410txagent.log"; echo "$?"
        if deployresult[-1] != "0":
            raise BaseException("Could not deploy sender on uPMU")
 
    except BaseException as be:
        print "ERROR: could not stop sender on uPMU {0}: {1}".format(upmu, be)
        config[upmu] = oldconfig[upmu]
        continue
    print "Removing metadata for uPMU {0}".format(upmu)
    try:
        metadata.remove({"ip": upmu})
    except BaseException as be:
        print "ERROR: could not remove metadata for uPMU {0}: {1}".format(upmu, be)
        config[upmu] = oldconfig[upmu]

writeconfig = ConfigParser.RawConfigParser()
for upmu in config:
    writeconfig.add_section(upmu)
    for option in config[upmu]:
        writeconfig.set(upmu, option, config[upmu][option])

with open('backupconfig.ini', 'w') as backupfile:
    writeconfig.write(backupfile)
