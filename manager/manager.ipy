#!/usr/bin/ipython
from configobj import ConfigObj
import json
import os
import pymongo
import sys
import uuid

UPMU_STREAMS = {"L1Mag", "L2Mag", "L3Mag", "L1Ang", "L2Ang", "L3Ang", "C1Mag", "C2Mag", "C3Mag", "C1Ang", "C2Ang", "C3Ang", "LSTATE"}

use_backup = True
must_deploy = set()
if len(sys.argv) == 2:
    if sys.argv[1] == "--update-all":
        use_backup = False
    else:
        use_backup = True

for upmu in sys.argv[1:]:
    must_deploy.add(upmu)

def mergenesteddicts(base, overrides):
    """ Merges OVERRIDES into BASE, overriding properties where necessary. If
    additional dictionaries are contained as values, they are recursively
    merged. """
    for key in overrides:
        if key in base and isinstance(base[key], dict) and isinstance(overrides[key], dict):
                mergenesteddicts(base[key], overrides[key])
        else:
            base[key] = overrides[key]

def deepcopy(dictionary):
    newdict = {}
    for key in dictionary:
        if isinstance(dictionary[key], dict):
            newdict[key] = deepcopy(dictionary[key])
        else:
            newdict[key] = dictionary[key]
    return newdict

config = ConfigObj('upmuconfig.ini')
if use_backup:
    oldconfig = ConfigObj('backupconfig.ini')
else:
    oldconfig = {}

# Check if we need to generate UUIDs
updated = False
for upmu in config:
    for stream in UPMU_STREAMS:
        if stream not in config[upmu]:
            updated = True
            config[upmu][stream] = {}
    for key in config[upmu]:
        if key in UPMU_STREAMS and 'uuid' not in config[upmu][key]:
            updated = True
            print "WARNING: Generating new uuid for stream {0} on upmu {1}".format(key, upmu)
            config[upmu][key]['uuid'] = str(uuid.uuid1())
if updated:
    config.write()

curr_upmus = set(config.keys())
old_upmus = set(oldconfig.keys())

!export PATH=/srv/uPMU-daemon/arm-2011.03/bin:$PATH && make -C .. crosscompile

client = pymongo.MongoClient()
metadata = client.upmu_test_database.upmu_metadata

for upmu in curr_upmus:
    if len(upmu) >= 1 and upmu[0] == '?':
        print "Skipping uPMU {0}: ip address begins with '?'".format(upmu)
        del config[upmu]
        continue
    deployed = True
    updatedmetadata = True
    print "Processing uPMU {0}".format(upmu)
    if upmu not in oldconfig or (upmu in must_deploy or ("%alias" in config[upmu] and config[upmu]["%alias"] in must_deploy)):
        print "Deploying sender on uPMU {0}".format(upmu)
        try:
            copyresult = !scp -i upmukey ../sender-arm admin@{upmu}:/tmp/newtxagent; echo "$?"
            if copyresult[-1] != "0":
                raise BaseException("Could not copy sender to uPMU")
            deployresult = !ssh -i upmukey admin@{upmu} "su -c 'killall 410txagent ; rm -f /tmp/410txagent.log && cp /tmp/newtxagent /root/410txagent && /etc/init.d/S80txagent start'"; echo "$?"
            if deployresult[-1] != "0":
                raise BaseException("Could not deploy sender on uPMU")
            if upmu in must_deploy:
                must_deploy.remove(upmu)
        except BaseException as be:
            print "ERROR: could not deploy sender on uPMU {0}: {1}".format(upmu, be)
            deployed = False
    if upmu in oldconfig:
        old_metadata = oldconfig[upmu]
    elif ('?' + upmu) in oldconfig:
        old_metadata = oldconfig['?' + upmu]
    else:
        old_metadata = {}     
    if old_metadata != config[upmu] or (upmu in must_deploy or ("%alias" in config[upmu] and config[upmu]["%alias"] in must_deploy)):
        try:   
            print "Updating metadata for uPMU {0}".format(upmu)
            # we have to update the database in this case
            #newdoc = config[upmu].copy()
            #if "ip" in newdoc:
            #    print "WARNING: option ip is overwritten with ip address"
            #newdoc["ip"] = upmu
            #metadata.update({"ip": upmu}, newdoc, upsert = True)
            collective_metadata = config[upmu].copy()
            streams = set()
            for stream in UPMU_STREAMS:
                del collective_metadata[stream] 
            if "%alias" in collective_metadata:
                del collective_metadata["%alias"]
            for stream in config[upmu]:
                if stream in UPMU_STREAMS:
                    newdoc = deepcopy(collective_metadata)
                    mergenesteddicts(newdoc, config[upmu][stream])
                    metadata.update({"uuid": config[upmu][stream]['uuid']}, newdoc, upsert = True)
        except BaseException as be:
            print "ERROR: could not update metadata on uPMU {0}: {1}".format(upmu, be)
            updatedmetadata = False
    if not deployed and not updatedmetadata:
        if upmu in oldconfig:
            config[upmu] = oldconfig[upmu]
        else:
            del config[upmu]
    elif not updatedmetadata:
        if upmu in oldconfig:
            config[upmu] = oldconfig[upmu]
        else:
            config[upmu] = {}
    elif not deployed:
        config['?' + upmu] = config[upmu]
        del config[upmu]

for upmu in old_upmus - curr_upmus:
    notdeployed = (len(upmu) >= 1 and upmu[0] == '?')
    if notdeployed and upmu[1:] in curr_upmus:
        continue
    if not notdeployed:
        print "Stopping sender for uPMU {0}".format(upmu)
        try:
            stilldeployed = False
            deployresult = !ssh -i upmukey admin@{upmu} "su -c 'killall 410txagent ; rm -f /tmp/410txagent.log'"; echo "$?"
            if deployresult[-1] != "0":
                raise BaseException("Could not stop sender on uPMU")
 
        except BaseException as be:
            print "ERROR: could not stop sender on uPMU {0}: {1}".format(upmu, be)
            stilldeployed = True
    else:
        stilldeployed = False
    if notdeployed:
        upmu = upmu[1:]
    print "Removing metadata for uPMU {0}".format(upmu)
    stillhasmetadata = False
    try:
        metadata.remove({"ip": upmu})
        for stream in oldconfig[upmu]:
            if stream in UPMU_STREAMS:
                metadata.remove({"uuid": oldconfig[upmu][stream]['uuid']})
    except BaseException as be:
        print "ERROR: could not remove metadata for uPMU {0}: {1}".format(upmu, be)
        stillhasmetadata = True
    if stillhasmetadata and stilldeployed:
        config[upmu] = oldconfig[upmu]
    elif stillhasmetadata:
        config['?' + upmu] = oldconfig[upmu]
    elif stilldeployed:
        config[upmu] = {}


config.filename = 'backupconfig.ini'
config.write()
